// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    partial class BookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackGroundUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Core.Entities.EventIteration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventIteration");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Venue");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.EventITerationWithoutSeats", b =>
                {
                    b.HasBaseType("Core.Entities.EventIteration");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasIndex("VenueId");

                    b.ToTable("EventITerationWithoutSeats", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EventIterationWithSeats", b =>
                {
                    b.HasBaseType("Core.Entities.EventIteration");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasIndex("VenueId");

                    b.ToTable("EventIterationWithSeats", (string)null);
                });

            modelBuilder.Entity("Core.Entities.VenueWithSeats", b =>
                {
                    b.HasBaseType("Core.Entities.Venue");

                    b.HasDiscriminator().HasValue("VenueWithSeats");
                });

            modelBuilder.Entity("Core.Entities.EventIteration", b =>
                {
                    b.HasOne("Core.Entities.Event", null)
                        .WithMany("Iterations")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Core.Entities.EventITerationWithoutSeats", b =>
                {
                    b.HasOne("Core.Entities.EventIteration", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.EventITerationWithoutSeats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Core.Entities.EventIterationWithSeats", b =>
                {
                    b.HasOne("Core.Entities.EventIteration", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.EventIterationWithSeats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.VenueWithSeats", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Core.Entities.Seat", "AvailbleSeats", b1 =>
                        {
                            b1.Property<int>("EventIterationWithSeatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.Property<string>("Row")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.HasKey("EventIterationWithSeatsId", "Id");

                            b1.ToTable("EventIterationWithSeats_AvailbleSeats");

                            b1.WithOwner()
                                .HasForeignKey("EventIterationWithSeatsId");
                        });

                    b.Navigation("AvailbleSeats");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Core.Entities.VenueWithSeats", b =>
                {
                    b.OwnsMany("Core.Entities.Seat", "Seats", b1 =>
                        {
                            b1.Property<int>("VenueWithSeatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.Property<string>("Row")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.HasKey("VenueWithSeatsId", "Id");

                            b1.ToTable("Venues_Seats");

                            b1.WithOwner()
                                .HasForeignKey("VenueWithSeatsId");
                        });

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Core.Entities.Event", b =>
                {
                    b.Navigation("Iterations");
                });
#pragma warning restore 612, 618
        }
    }
}
